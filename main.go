package main

import (
	"fmt"
	"github.com/petemoore/pulse-go/pulse"
	"github.com/petemoore/taskcluster-client-go/exchange"
	"github.com/streadway/amqp"
	"os"
)

func main() {

	// Requires that you set your pulse username and pulse password via these
	// environment variables...
	p1 := pulse.NewConnection(os.Getenv("PULSE_USER"), os.Getenv("PULSE_PASSWORD"))
	// If not connecting to production, you can specify a different url...
	// p1.SetURL("amqp://guest:guest@localhost:5672/")

	// Simple example callback function to just print message body...
	printMe := func(d amqp.Delivery) {
		fmt.Println(string(d.Body))
	}

	q1 := p1.Consume(
		"",      // queue name ("" implies uuid should be generated)
		printMe, // callback function to call with each AMQP delivery...
		1,       // prefetch
		1,       // max length (not yet used)
		// List of bindings (variadic)
		// Two provided below, but you can provide as many as you wish...
		// A custom Binding (using autogenerated types)
		exchange.TaskDefined{ProvisionerId: "null-provisioner", WorkerType: "buildbot-try"},
		// Example of a simple binding which just takes strings...
		pulse.Bind("#", "exchange/build/"),
		pulse.Bind("#", "exchange/bugzilla/simple"))

	// not yet implemented
	q1.Pause()
	// not yet implemented
	q1.Resume()
	// not yet implemented
	q1.Delete()
	// not yet implemented
	q1.Close()

	// wait for a never-arriving message, to avoid exiting program
	forever := make(chan int)
	<-forever
}
