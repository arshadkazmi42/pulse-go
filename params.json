{"name":"Pulse-go","tagline":"Go (golang) client for pulse.mozilla.org","body":"# pulse-go\r\n<img hspace=\"20\" align=\"left\" src=\"https://tools.taskcluster.net/lib/assets/taskcluster-120.png\" />\r\n[![Build Status](https://secure.travis-ci.org/taskcluster/pulse-go.png)](http://travis-ci.org/taskcluster/pulse-go)\r\n[![GoDoc](https://godoc.org/github.com/taskcluster/pulse-go?status.png)](https://godoc.org/github.com/taskcluster/pulse-go)\r\n\r\nA go (golang) library for consuming mozilla pulse messages (http://pulse.mozilla.org/).\r\n\r\n## This project contains three go packages:\r\n\r\n# Package 1: \"github.com/taskcluster/pulse-go\"\r\n\r\nThis is a command line interface for consuming mozilla pulse messages, written in go.\r\n\r\nThe best way to see how to use this command line tool, is to run it with the --help option:\r\n\r\n```\r\npmoore@home:~ $ pulse-go --help\r\npulse-go\r\npulse-go is a very simple command line utility that allows you to specify a list of Pulse\r\nexchanges/routing keys that you wish to bind to, and prints the body of the Pulse messages\r\nto standard out.\r\n\r\nDerivation of username, password and AMQP server url\r\n====================================================\r\nIf no AMQP server is specified, production will be used (amqps://pulse.mozilla.org:5671).\r\n\r\nIf a pulse username is specified on the command line, it will be used.\r\nOtherwise, if the AMQP server url is provided and contains a username, it will be used.\r\nOtherwise, if a value is set in the environment variable PULSE_USERNAME, it will be used.\r\nOtherwise the value 'guest' will be used.\r\n\r\nIf a pulse password is specified on the command line, it will be used.\r\nOtherwise, if the AMQP server url is provided and contains a password, it will be used.\r\nOtherwise, if a value is set in the environment variable PULSE_PASSWORD, it will be used.\r\nOtherwise the value 'guest' will be used.\r\n\r\n  Usage:\r\n      pulse-go [-u <pulse_user>] [-p <pulse_password>] [-s <amqp_server_url>] (<exchange> <routing_key>)...\r\n      pulse-go -h | --help\r\n\r\n  Options:\r\n    -h, --help            Display this help text.\r\n    -u <pulse_user>       The pulse user to connect with (see http://pulse.mozilla.org/).\r\n    -p <pulse_password>   The password to use for connecting to pulse.\r\n    -s <amqp_server_url>  The full amqp/amqps url to use for connecting to the pulse server.\r\n\r\n  Examples:\r\n    1)  pulse-go -u pmoore_test1 -p potato123 \\\r\n        exchange/build/ '#' \\\r\n        exchange/taskcluster-queue/v1/task-defined '*.*.*.*.*.null-provisioner.buildbot-try.#'\r\n\r\n    This would display all messages from exchange exchange/build/ and only messages from\r\n    exchange/taskcluster-queue/v1/task-defined with provisionerId = \"null-provisioner\" and\r\n    workerType = \"buildbot-try\" (see http://docs.taskcluster.net/queue/exchanges/#taskDefined\r\n    for more information).\r\n\r\n    Remember to quote your routing key strings on the command line, so they are not\r\n    interpreted by your shell!\r\n\r\n    Please note if you are interacting with taskcluster exchanges, please consider using one\r\n    of the following libraries, for better handling:\r\n\r\n      * https://github.com/taskcluster/taskcluster-client-go\r\n      * https://github.com/taskcluster/taskcluster-client\r\n\r\n    2) pulse-go -s amqps://admin:peanuts@localhost:5671 exchange/treeherder/v2/new-result-set '#'\r\n\r\n    This would match all messages on the given exchange, published to the local AMQP service\r\n    running on localhost. Notice that the user and password are given as part of the url.\r\npmoore@home:~ $ \r\n```\r\n\r\n# Package 2: \"github.com/taskcluster/pulse-go/pulse\"\r\n\r\nThis is a pulse client library, written in go.\r\n\r\nThe full API documentation is available at http://godoc.org/github.com/taskcluster/pulse-go/pulse\r\n\r\n# Package 3: \"github.com/taskcluster/pulse-go/pulsesniffer\"\r\n\r\nThis package contains the following *example* program, which uses the pulse library (package 2 above).\r\n\r\n```go\r\n// Package pulsesniffer provides a simple example program that listens to some\r\n// real world pulse messages.\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"github.com/taskcluster/pulse-go/pulse\"\r\n\t\"github.com/streadway/amqp\"\r\n)\r\n\r\nfunc main() {\r\n\t// Passing all empty strings:\r\n\t// empty user => use PULSE_USERNAME env var\r\n\t// empty password => use PULSE_PASSWORD env var\r\n\t// empty url => connect to production\r\n\tconn := pulse.NewConnection(\"\", \"\", \"\")\r\n\tconn.Consume(\r\n\t\t\"taskprocessing\", // queue name\r\n\t\tfunc(message interface{}, delivery amqp.Delivery) { // callback function to pass messages to\r\n\t\t\tfmt.Println(\"Received from exchange \" + delivery.Exchange + \":\")\r\n\t\t\tfmt.Println(string(delivery.Body))\r\n\t\t\tfmt.Println(\"\")\r\n\t\t\tdelivery.Ack(false) // acknowledge message *after* processing\r\n\t\t},\r\n\t\t1,     // prefetch 1 message at a time\r\n\t\tfalse, // don't auto-acknowledge messages\r\n\t\tpulse.Bind( // routing key and exchange to get messages from\r\n\t\t\t\"*.*.*.*.*.*.gaia.#\",\r\n\t\t\t\"exchange/taskcluster-queue/v1/task-defined\"),\r\n\t\tpulse.Bind( // another routing key and exchange to get messages from\r\n\t\t\t\"*.*.*.*.*.aws-provisioner.#\",\r\n\t\t\t\"exchange/taskcluster-queue/v1/task-running\"))\r\n\tconn.Consume( // a second workflow to manage concurrently\r\n\t\t\"\", // empty name implies anonymous queue\r\n\t\tfunc(message interface{}, delivery amqp.Delivery) { // simpler callback than before\r\n\t\t\tfmt.Println(\"Buildbot message received\")\r\n\t\t\tfmt.Println(\"\")\r\n\t\t},\r\n\t\t1,    // prefetch\r\n\t\ttrue, // auto acknowledge, so no need to call delivery.Ack\r\n\t\tpulse.Bind( // routing key and exchange to get messages from\r\n\t\t\t\"#\", // get *all* normalized buildbot messages\r\n\t\t\t\"exchange/build/normalized\"))\r\n\t// wait forever\r\n\tforever := make(chan bool)\r\n\t<-forever\r\n}\r\n```\r\n\r\nTravis build success/failure messages are posted to irc channel #tcclient-go on irc.mozilla.org:6697.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}